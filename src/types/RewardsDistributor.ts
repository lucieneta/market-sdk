/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CompBorrowSpeedUpdated = ContractEventLog<{
  cToken: string;
  newSpeed: string;
  0: string;
  1: string;
}>;
export type CompGranted = ContractEventLog<{
  recipient: string;
  amount: string;
  0: string;
  1: string;
}>;
export type CompSupplySpeedUpdated = ContractEventLog<{
  cToken: string;
  newSpeed: string;
  0: string;
  1: string;
}>;
export type ContributorCompSpeedUpdated = ContractEventLog<{
  contributor: string;
  newSpeed: string;
  0: string;
  1: string;
}>;
export type DistributedBorrowerComp = ContractEventLog<{
  cToken: string;
  borrower: string;
  compDelta: string;
  compBorrowIndex: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type DistributedSupplierComp = ContractEventLog<{
  cToken: string;
  supplier: string;
  compDelta: string;
  compSupplyIndex: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type NewAdmin = ContractEventLog<{
  oldAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type NewPendingAdmin = ContractEventLog<{
  oldPendingAdmin: string;
  newPendingAdmin: string;
  0: string;
  1: string;
}>;

export interface RewardsDistributor extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RewardsDistributor;
  clone(): RewardsDistributor;
  methods: {
    _acceptAdmin(): NonPayableTransactionObject<void>;

    _grantComp(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    _setCompBorrowSpeed(
      cToken: string,
      compSpeed: number | string | BN
    ): NonPayableTransactionObject<void>;

    _setCompSpeeds(
      cTokens: string[],
      supplySpeeds: (number | string | BN)[],
      borrowSpeeds: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    _setCompSupplySpeed(
      cToken: string,
      compSpeed: number | string | BN
    ): NonPayableTransactionObject<void>;

    _setContributorCompSpeed(
      contributor: string,
      compSpeed: number | string | BN
    ): NonPayableTransactionObject<void>;

    _setPendingAdmin(
      newPendingAdmin: string
    ): NonPayableTransactionObject<void>;

    admin(): NonPayableTransactionObject<string>;

    allMarkets(arg0: number | string | BN): NonPayableTransactionObject<string>;

    "claimRewards(address,address[])"(
      holder: string,
      cTokens: string[]
    ): NonPayableTransactionObject<void>;

    "claimRewards(address[],address[],bool,bool)"(
      holders: string[],
      cTokens: string[],
      borrowers: boolean,
      suppliers: boolean
    ): NonPayableTransactionObject<void>;

    "claimRewards(address)"(holder: string): NonPayableTransactionObject<void>;

    compAccrued(arg0: string): NonPayableTransactionObject<string>;

    compBorrowSpeeds(arg0: string): NonPayableTransactionObject<string>;

    compBorrowState(arg0: string): NonPayableTransactionObject<{
      index: string;
      block: string;
      0: string;
      1: string;
    }>;

    compBorrowerIndex(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    compContributorSpeeds(arg0: string): NonPayableTransactionObject<string>;

    compInitialIndex(): NonPayableTransactionObject<string>;

    compSupplierIndex(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    compSupplySpeeds(arg0: string): NonPayableTransactionObject<string>;

    compSupplyState(arg0: string): NonPayableTransactionObject<{
      index: string;
      block: string;
      0: string;
      1: string;
    }>;

    flywheelPreBorrowerAction(
      cToken: string,
      borrower: string
    ): NonPayableTransactionObject<void>;

    flywheelPreSupplierAction(
      cToken: string,
      supplier: string
    ): NonPayableTransactionObject<void>;

    flywheelPreTransferAction(
      cToken: string,
      src: string,
      dst: string
    ): NonPayableTransactionObject<void>;

    getAllMarkets(): NonPayableTransactionObject<string[]>;

    getBlockNumber(): NonPayableTransactionObject<string>;

    implementation(): NonPayableTransactionObject<string>;

    initialize(_rewardToken: string): NonPayableTransactionObject<void>;

    isRewardsDistributor(): NonPayableTransactionObject<boolean>;

    lastContributorBlock(arg0: string): NonPayableTransactionObject<string>;

    pendingAdmin(): NonPayableTransactionObject<string>;

    rewardToken(): NonPayableTransactionObject<string>;

    updateContributorRewards(
      contributor: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    CompBorrowSpeedUpdated(cb?: Callback<CompBorrowSpeedUpdated>): EventEmitter;
    CompBorrowSpeedUpdated(
      options?: EventOptions,
      cb?: Callback<CompBorrowSpeedUpdated>
    ): EventEmitter;

    CompGranted(cb?: Callback<CompGranted>): EventEmitter;
    CompGranted(
      options?: EventOptions,
      cb?: Callback<CompGranted>
    ): EventEmitter;

    CompSupplySpeedUpdated(cb?: Callback<CompSupplySpeedUpdated>): EventEmitter;
    CompSupplySpeedUpdated(
      options?: EventOptions,
      cb?: Callback<CompSupplySpeedUpdated>
    ): EventEmitter;

    ContributorCompSpeedUpdated(
      cb?: Callback<ContributorCompSpeedUpdated>
    ): EventEmitter;
    ContributorCompSpeedUpdated(
      options?: EventOptions,
      cb?: Callback<ContributorCompSpeedUpdated>
    ): EventEmitter;

    DistributedBorrowerComp(
      cb?: Callback<DistributedBorrowerComp>
    ): EventEmitter;
    DistributedBorrowerComp(
      options?: EventOptions,
      cb?: Callback<DistributedBorrowerComp>
    ): EventEmitter;

    DistributedSupplierComp(
      cb?: Callback<DistributedSupplierComp>
    ): EventEmitter;
    DistributedSupplierComp(
      options?: EventOptions,
      cb?: Callback<DistributedSupplierComp>
    ): EventEmitter;

    NewAdmin(cb?: Callback<NewAdmin>): EventEmitter;
    NewAdmin(options?: EventOptions, cb?: Callback<NewAdmin>): EventEmitter;

    NewPendingAdmin(cb?: Callback<NewPendingAdmin>): EventEmitter;
    NewPendingAdmin(
      options?: EventOptions,
      cb?: Callback<NewPendingAdmin>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "CompBorrowSpeedUpdated",
    cb: Callback<CompBorrowSpeedUpdated>
  ): void;
  once(
    event: "CompBorrowSpeedUpdated",
    options: EventOptions,
    cb: Callback<CompBorrowSpeedUpdated>
  ): void;

  once(event: "CompGranted", cb: Callback<CompGranted>): void;
  once(
    event: "CompGranted",
    options: EventOptions,
    cb: Callback<CompGranted>
  ): void;

  once(
    event: "CompSupplySpeedUpdated",
    cb: Callback<CompSupplySpeedUpdated>
  ): void;
  once(
    event: "CompSupplySpeedUpdated",
    options: EventOptions,
    cb: Callback<CompSupplySpeedUpdated>
  ): void;

  once(
    event: "ContributorCompSpeedUpdated",
    cb: Callback<ContributorCompSpeedUpdated>
  ): void;
  once(
    event: "ContributorCompSpeedUpdated",
    options: EventOptions,
    cb: Callback<ContributorCompSpeedUpdated>
  ): void;

  once(
    event: "DistributedBorrowerComp",
    cb: Callback<DistributedBorrowerComp>
  ): void;
  once(
    event: "DistributedBorrowerComp",
    options: EventOptions,
    cb: Callback<DistributedBorrowerComp>
  ): void;

  once(
    event: "DistributedSupplierComp",
    cb: Callback<DistributedSupplierComp>
  ): void;
  once(
    event: "DistributedSupplierComp",
    options: EventOptions,
    cb: Callback<DistributedSupplierComp>
  ): void;

  once(event: "NewAdmin", cb: Callback<NewAdmin>): void;
  once(event: "NewAdmin", options: EventOptions, cb: Callback<NewAdmin>): void;

  once(event: "NewPendingAdmin", cb: Callback<NewPendingAdmin>): void;
  once(
    event: "NewPendingAdmin",
    options: EventOptions,
    cb: Callback<NewPendingAdmin>
  ): void;
}
